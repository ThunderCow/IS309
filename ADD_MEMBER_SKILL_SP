/*
ADD_MEMBER_SKILL_SP.  Associates a member with a required skill. Inserts data 
into the VM_MEMSKILL table.

PARAMETERS:  Described below
RETURNS:  No values returned.
ERROR MESSAGES:
    Error text:  "Missing mandatory value for parameter (x) in context (y)"
    Error meaning:  Since both a skill name and an member's person id are required, 
        Missing either one causes this error.  Here, y = 'ADD_MEMBER_SKILL_SP'.
	Error effect: Because a mandatory value is not provided, no data are 
            inserted into the VM_MEMSKILL table.
            
    Error text:  "Invalid value for parameter (x) in context (y)."
    Error meaning.  Either the p_skill_name value is not found in VM_SKILL,
    or the p_person_id value is not found in the VM_MEMBER  table. 
    Here, y = 'ADD_MEMBER_SKILL_SP'.
    Error effect:  Because a value is invalid, no data are inserted into the
            VM_MEMSKILL table.
*/

create or replace procedure ADD_MEMBER_SKILL_SP (
    p_person_id     IN  INTEGER,    -- NOT NULL
    p_skill_name    IN  VARCHAR -- NOT NULL
)

IS

p_count number;
p_count_id number;
ex_error exception;
err_msg_txt varchar(200) :=null;

BEGIN

select count (PERSON_ID)
into p_count_id
from VM_PERSON
where PERSON_ID = p_person_id;

if p_count_id = 0 
then 
err_msg_txt := 'Invalid value for parameter p_person_id in context ADD_MEMBER_SKILL_SP.
The ID number is not found in VM_PERSON.';
raise ex_error;

elsif p_person_id is null then
err_msg_txt := 'Missing mandatory value for parameter PERSON_ID in context ADD_MEMBER_SKILL_SP';
raise ex_error;
end if; 

select count (*)
into p_count 
from VM_SKILL
where p_skill_name = SKILL_NAME;

if p_count = 0 
then 
err_msg_txt := 'Invalid value for parameter p_skill_name in context ADD_MEMBER_SKILL_SP.
The skill name is not found in VM_SKILL.';
raise ex_error;

elsif p_skill_name is null then
err_msg_txt := 'Missing mandatory value for parameter SKILL_NAME in context ADD_MEMBER_SKILL_SP';
raise ex_error;
end if;

    INSERT INTO VM_MEMSKILL ("PERSON_ID", "SKILL_NAME")
    VALUES (p_person_id, p_skill_name);
    COMMIT;

Exception
    when ex_error then
    dbms_output.put_line(err_msg_txt);
    rollback;
    when others then
    dbms_output.put_line(' the error code is: ' || sqlcode);
    dbms_output.put_line(' the error msg is: ' || sqlerrm);
    rollback;


END;
/

BEGIN 
    ADD_MEMBER_SKILL_SP(76,'History');
END;
/
