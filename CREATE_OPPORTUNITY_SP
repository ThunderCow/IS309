/*
CREATE_OPPORTUNITY_SP. Add a new opportunity for an organization.  As with other 
procedures, this one will create a contact person by calling CREATE_PERSON_SP, 
and a location by calling CREATE_LOCATION_SP.

PARAMETERS:  Described below
RETURNS:  a new or existing opportunity_id, using the p_opportunity_id output parameter
PARAMETERS:  Described below
RETURNS:  a new or existing opportunity_id, identifying the opportunity.
ERROR MESSAGES:
    Error text:  "Missing mandatory value for parameter (x) in context (y). No opportunity added." 
	Error effect: Because a mandatory value is not provided, no data are 
            inserted into the VM_OPPORTUNITY table.  The p_opportunity_id value 
            returned is NULL.  Here, y = 'CREATE_OPPORTUNITY_SP'
            
    Errors with contact person or location data are generated by 
    CREATE_PERSON_SP and CREATE_LOCATION_SP procedures respectively.
    
    Error text:  "Invalid value for parameter (x) in context (y)  No opportunity added."
    Error meaning.  A parameter does not match the domain specification, i.e.
            the organization_type is not one of the permitted values in this 
            procedure.  Here, y = 'CREATE_OPPORTUNITY_SP'
    Error effect:  Because a value is invalid, no data are inserted into the
            VM_OPPORTUNITY table.  The p_opportunity_id value returned is
            NULL.
           
    Error text:  "Organization (x) not found.  No opportunity added."
    Error meaning:  The value of the p_org_id parameter does not match an 
        existing organization in the VM_ORGANIZATION table.
    Error effect:   Because a valid organization cannot be associated with
        the opportunity, no data are inserted into the VM_OPPORTUNITY table. 
        The p_opp_id value returned is NULL.        
            
    Error text:  "Invalid point of contact (x). No opportunity added."
    Error meaning:  The call to the CREATE_PERSON_SP routine has failed to 
        create or retrieve a person_id value.
    Error effect:   Because a valid point of contact cannot be associated with
        the organization, no data are inserted into the VM_OPPORTUNITY table. 
        The p_opp_id value returned is NULL.
        
*/

create or replace procedure CREATE_OPPORTUNITY_SP (
    p_org_id                    IN  INTEGER,        -- NOT NULL
    p_opp_title                 IN  VARCHAR,   -- NOT NULL
    p_opp_description           IN  LONG,       
    p_opp_create_date           IN  DATE,       -- If NULL, use SYSDATE
    p_opp_max_volunteers        IN  INTEGER,    -- If provided, must be > 0
    p_opp_min_volunteer_age     IN  INTEGER,    -- If provided, must be between 0 and 125
    p_opp_start_date            IN  DATE,
    p_opp_start_time            IN  CHAR,       
    p_opp_end_date              IN  DATE,
    p_opp_end_time              IN  CHAR,
    p_opp_status                IN  VARCHAR,    -- If provided, must conform to domain
    p_opp_great_for             IN  VARCHAR,    -- If provided, must conform to domain
    p_location_country	        IN	VARCHAR,  -- passed to CREATE_LOCATION_SP
    p_location_postal_code      IN	VARCHAR,  -- passed to CREATE_LOCATION_SP
    p_location_street1	        IN	VARCHAR,  -- passed to CREATE_LOCATION_SP
    p_location_street2	        IN	VARCHAR,  -- passed to CREATE_LOCATION_SP
    p_location_city	            IN	VARCHAR,  -- passed to CREATE_LOCATION_SP
    p_location_administrative_region IN VARCHAR,  -- passed to CREATE_LOCATION_SP
    p_person_email              IN VARCHAR,   -- passed to CREATE_PERSON_SP
    P_person_given_name         IN VARCHAR,   -- passed to CREATE_PERSON_SP
    p_person_surname            IN VARCHAR,   -- passed to CREATE_PERSON_SP
    p_person_phone              IN VARCHAR    -- passed to CREATE_PERSON_SP    
)
IS


CURSOR chk_dup is
    SELECT OPPORTUNITY_ID FROM VM_OPPORTUNITY WHERE OPPORTUNITY_ID = p_opp_id;

CURSOR chk_org_id IS
    SELECT ORGANIZATION_ID FROM VM_ORGANIZATION WHERE ORGANIZATION_ID = p_org_id;

lv_person_id_out Number;
lv_location_id_out NUMBER;
lv_p_opp_id_out NUMBER;
chk_dup NUMBER;
lv_chk_id NUMBER;

ex_error exception;
err_msg_txt varchar(200) :=null;
--lv_henter_verdi NUMBER;
BEGIN

OPEN chk_dup;
FETCH chk_dup INTO chk_pr_dup;
    IF chk_dup%FOUND THEN
        err_msg_txt := 'THE OPPORTUNITY_ID IS ALREADY FOUND, THE ID IS: ' || p_opp_id || ' THUS, NOT INSERTING NEW DATA ';
        RAISE ex_error;
    END IF;
    CLOSE chk_dup;

/*Check Mandatory values for Create_Opportunity*/
if p_opp_id is null then
err_msg_txt := 'Missing mandatory value for parameter, OPPORTUNITY_ID  can not be null. 
The p_opp_id value returned is NULL.  ';
raise ex_error;

elsif p_opp_title is null then
err_msg_txt := 'Missing mandatory value for parameter, OPPORTUNITY_TITLE  can not be null. 
The p_opp_title value returned is NULL.  ';
raise ex_error;

elsif p_opp_description is null then
err_msg_txt := 'Missing mandatory value for parameter, OPPORTUNITY_DESCRIPTION  can not be null.
The p_opp_description value returned is NULL.  ';
raise ex_error;

elsif p_opp_create_date is null then
err_msg_txt := 'Missing mandatory value for parameter, OPPORTUNITY_CREATE_DATE  can not be null. 
The p_opp_create_date value returned is NULL.  ';
raise ex_error;
end if;

/*CREATING PERSON THROUGH CALLING PERSON PROCEDURE*/
    SELECT count (*)INTO lv_person_id_out FROM VM_PERSON where lv_person_id_out = PERSON_ID;

CREATE_PERSON_SP(
    lv_person_id_out,
    p_person_email,
    P_person_given_name,
    p_person_surname,
    p_person_phone);
    
    IF lv_person_id_out IS NULL THEN
        err_msg_txt := 'Invalild value for parameter ' || lv_person_id_out ||', in context with CREATE_ORGANIZATION_SP';
        RAISE ex_error;
    END IF;
    
/*CREATING LOCATION THROUGH CALLING LOCATION PROCEDURE*/
SELECT count (*) 
INTO lv_location_id_out 
FROM VM_LOCATION 
WHERE lv_location_id_out = LOCATION_ID;

create_location_sp(
    lv_location_id_out,
    p_location_country,
    p_location_postal_code,
    p_location_street1,
    p_location_street2,
    p_location_city,
    p_location_administrative_region);
    
    IF lv_location_id_out IS NULL THEN
        err_msg_txt := 'Invalild value for parameter ' || lv_location_id_out ||', in context with CREATE_ORGANIZATION_SP';
        RAISE ex_error;
    END IF;

OPEN chk_org_id;
FETCH chk_org_id INTO lv_chk_id;
IF chk_org_id%FOUND THEN
    INSERT INTO VM_CREATE_OPPORTUNITY (
    OPPORTUNITY_ID,
    OPPORTUNITY_TITLE,
    OPPORTUNITY_DESCRIPTION,
    OPPORTUNITY_CREATE_DATE,
    OPPORTUNITY_MAX_VOLUNTEERS,
    OPPORTUNITY_MIN_VOLUNTEER_AGE,
    OPPORTUNITY_START_DATE,
    OPPORTUNITY_START_TIME,
    OPPORTUNITY_END_DATE,
    OPPORTUNITY_END_TIME,
    OPPORTUNITY_STATUS,
    OPPORTUNITY_GREAT_FOR,
    LOCATION_ID,
    ORGANIZATION_ID,
    PERSON_ID)
    VALUES (
    lv_henter_verdi, 
    p_opp_title,
    p_opp_description,
    p_opp_create_date,
    p_opp_max_volunteers,
    p_opp_min_volunteer_age,
    p_opp_start_date,
    p_opp_start_time,
    p_opp_end_date,
    p_opp_end_time,
    p_opp_status,
    p_opp_great_for,
    lv_location_id_out
    lv_person_id_out)
    
    RETURNING p_opp_id INTO inserted_id;
    DBMS_OUTPUT.PUT_LINE('Newly created data, has the PERSON_ID = '||inserted_id);

ELSIF chk_org_id%NOTFOUND THEN
    err_msg_txt := 'The value of the p_org_id parameter does not match which is ' || lv_chk_id ||', thus, no data are inserted';
    RAISE ex_error;
END IF;    
    CLOSE chk_org_id; 

/*EXCEPTION SECTION*/
Exception
when ex_error then
dbms_output.put_line(err_msg_txt);
rollback;
when others then
dbms_output.put_line(' the error code is: ' || sqlcode);
dbms_output.put_line(' the error msg is: ' || sqlerrm);
rollback;
    
END;
/
